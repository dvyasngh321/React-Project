{"version":3,"sources":["components/Header.js","components/Card.js","components/Form.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","href","Card","props","title","content","type","onClick","deleteItem","id","Form","useState","titleText","setTitleText","items","setItem","handleChange","event","target","name","value","prevValue","prevItem","filter","item","index","onChange","placeholder","map","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0LAceA,MAXf,WACI,OAEA,6BACG,yBAAKC,UAAU,eACX,uBAAGC,KAAK,IAAID,UAAU,mBAAtB,e,4BCWIE,MAjBf,SAAcC,GAGV,OACO,yBAAKH,UAAU,2BACZ,yBAAKA,UAAU,2BACZ,0BAAMA,UAAU,cAAcG,EAAMC,OACpC,2BAAID,EAAME,SAEV,4BAAQC,KAAK,SAASN,UAAU,YAAYO,QAAS,WACjDJ,EAAMK,WAAYL,EAAMM,MAD5B,aCyDFC,MAjEf,WAAgB,IAAD,EACwBC,mBAAS,CACxCP,MAAQ,GACRC,QAAU,KAHH,mBACJO,EADI,KACQC,EADR,OAKcF,mBAAS,IALvB,mBAKJG,EALI,KAKGC,EALH,KAOX,SAASC,EAAaC,GAAO,IAAD,EACDA,EAAMC,OAAtBC,EADiB,EACjBA,KAAOC,EADU,EACVA,MACdP,GAAa,SAAAQ,GACT,OAAO,2BACAA,GADP,kBAEKF,EAAQC,OAgBrB,SAASZ,EAAWC,GAChBM,GAAQ,SAAAO,GACJ,OAAOA,EAASC,QAAO,SAACC,EAAMC,GAC1B,OAAOA,IAAUhB,QAK7B,OACI,6BACA,yBAAKT,UAAU,aACf,yBAAKA,UAAU,OACX,0BAAMA,UAAU,gBACb,yBAAKA,UAAU,OACZ,yBAAKA,UAAU,uBACZ,2BAAO0B,SAAUV,EAAcV,KAAK,OAAOqB,YAAY,QAAQR,KAAK,QAAQnB,UAAU,WAAWoB,MAAOR,EAAUR,QAClH,2BAAOsB,SAAUV,EAAcV,KAAK,OAAOqB,YAAY,UAAUR,KAAK,UAAUnB,UAAU,WAAWoB,MAAOR,EAAUP,UACtH,4BAAQL,UAAU,MAAMM,KAAK,SAASC,QA5BvD,WACIQ,GAAQ,SAAAO,GACJ,MAAM,GAAN,mBAAWA,GAAX,CAAsBV,OAG1BC,EAAa,CACTT,MAAQ,GACRC,QAAU,OAqBD,UAMb,yBAAKL,UAAU,aACZ,yBAAKA,UAAU,OACbc,EAAMc,KAAI,SAACJ,EAAMC,GAAP,OACX,yBAAKzB,UAAU,cACZ,kBAAC,EAAD,CAAO6B,IAAKJ,EAAOhB,GAAIgB,EAAOrB,MAAQoB,EAAKpB,MAAOC,QAAUmB,EAAKnB,QAASG,WAAYA,Y,MC5CtFsB,MATf,WACE,OACE,yBAAK9B,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGc+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.583032b9.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nfunction Header(){\r\n    return(\r\n       \r\n    <nav>\r\n       <div className=\"nav-wrapper\">\r\n           <a href=\"/\" className=\"brand-logo left\">Note App</a>\r\n       </div>\r\n    </nav>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nfunction Card(props){\r\n        \r\n        \r\n    return(    \r\n           <div className=\"card blue-grey darken-1\">\r\n              <div className=\"card-content white-text\">\r\n                 <span className=\"card-title\">{props.title}</span>\r\n                 <p>{props.content}</p>\r\n\r\n                 <button type=\"button\" className=\"btn right\" onClick={() => {\r\n                     props.deleteItem (props.id) }\r\n                    }>Delete</button>\r\n             </div>\r\n            </div> \r\n    )\r\n}\r\n\r\nexport default Card;\r\n\r\n ","import React, {useState} from 'react';\r\nimport Card from './Card';\r\n\r\nfunction Form(){\r\n    const [titleText , setTitleText] = useState({\r\n        title : \"\",\r\n        content : \"\"\r\n    });\r\n    const [items, setItem] = useState([]);\r\n    \r\n    function handleChange(event){\r\n        const {name , value} = event.target;\r\n        setTitleText(prevValue => {\r\n            return {\r\n                ...prevValue, \r\n                [name] : value\r\n            }\r\n        })\r\n    }\r\n\r\n    function handleClick(){\r\n        setItem(prevItem => {\r\n            return [...prevItem , titleText];\r\n        });\r\n\r\n        setTitleText({\r\n            title : \"\",\r\n            content : \"\"\r\n        })\r\n    }\r\n\r\n    function deleteItem(id){\r\n        setItem(prevItem => {\r\n            return prevItem.filter((item, index)=> {\r\n                return index !== id;\r\n            })\r\n        })\r\n    }\r\n\r\n    return(\r\n        <div>\r\n        <div className=\"container\">\r\n        <div className=\"row\">\r\n            <form className=\"col s12 form\">\r\n               <div className=\"row\">\r\n                  <div className=\"input-field col s12\">\r\n                     <input onChange={handleChange} type=\"text\" placeholder=\"Title\" name=\"title\" className=\"validate\" value={titleText.title} />\r\n                     <input onChange={handleChange} type=\"text\" placeholder=\"Content\" name=\"content\" className=\"validate\" value={titleText.content} />\r\n                     <button className=\"btn\" type=\"button\" onClick={handleClick}>+</button>\r\n                   </div>\r\n               </div>\r\n           </form>\r\n        </div>\r\n        </div>\r\n        <div className=\"container\">\r\n           <div className=\"row\">\r\n            {items.map((item, index) =>\r\n            <div className=\"col s12 m4\">\r\n               <Card  key={index} id={index} title= {item.title} content ={item.content} deleteItem={deleteItem}/> \r\n            </div>\r\n           )}\r\n           </div>\r\n        </div>   \r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default Form;","import React from 'react';\nimport Header from './components/Header';\nimport Form from './components/Form';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Form />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}